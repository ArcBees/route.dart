// Auto-generated from company-info-loader.html.
// DO NOT EDIT.

library companyinfoloader;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'package:route/client.dart';
import '../routable-component.dart';
import 'company-info.dart';
import 'dart:async';
import 'dart:html';



class CompanyInfoLoaderComponent extends RoutableWebComponent  with Observable {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''''');
  autogenerated.Template __t;

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */


  dynamic __$company;
  dynamic get company {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'company');
    }
    return __$company;
  }
  set company(dynamic value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'company',
          __$company, value);
    }
    __$company = value;
  }
  Router router;
  Router childRouter;
  var currentComponent;

  void configureRouter(Router router) {
    print('CompanyInfoLoaderComponent.configureRouter');
    this.router = router
      ..addRoute(
          name: 'company',
          path: '/:companyId',
          enter: _showCompanyInfo,
          leave: _hideCompanyInfo,
          mount: (r) => childRouter = r);
  }

  _showCompanyInfo(RouteEvent e) {
    print('_companyInfoRouter ${e.parameters['companyId']}');
    var tokenInt = int.parse(e.parameters['companyId'], onError: (s) => -1);
    if (tokenInt > -1) {
      company = {
        'id': 100001,
        'name': 'Nike',
        'revenue': 3000000.00
      };
      var info = new CompanyInfoComponent();
      info.company = company;
      createAndInsertComponent(info);
      childRouter.addRoute(name: 'info', defaultRoute: true, path: '', mount: info);
      router.reroute();
    }
  }

  createAndInsertComponent(WebComponent comp) {
    comp.host = new DivElement();
    currentComponent = comp;
    var lifecycleCaller = new ComponentItem(comp);
    lifecycleCaller.create();
    host.children.add(comp.host);
    lifecycleCaller.insert();
  }

  _hideCompanyInfo(RouteEvent e) {
    if (currentComponent != null) {
      var lifecycleCaller = new ComponentItem(currentComponent);
      currentComponent.host.remove();
      lifecycleCaller.remove();
      childRouter.removeRoute('info');
    }
    currentComponent = null;
  }
}
//@ sourceMappingURL=company-info-loader.dart.map